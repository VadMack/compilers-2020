-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c@[stack, state, w], insns) {

  case insns of
	  BINOP (op)   : remainingInsns -> case stack of
    					l : r : remainingStack -> eval([evalOp(op, l, r) : remainingStack, state, w], remainingInsns)
    				      esac
	  | CONST (n)  : remainingInsns -> eval([n : stack, state, w], remainingInsns)
	  | READ       : remainingInsns -> eval([readWorld(w)[0] : stack, state, readWorld(w)[1]], remainingInsns)
		              eval( [new_w[0] : stack, state, new_w[1]], p )
	  | WRITE      : remainingInsns -> case stack of
	  				      digit : remainingStack -> eval([remainingStack, state, writeWorld(digit, w)], remainingInsns)
	  				    esac
	  | LD    (x)  : remainingInsns -> eval([state(x) : stack, state, w], remainingInsns)
    	  | ST    (x)  : remainingInsns -> case stack of
    	  				      digit : stack -> eval([stack, state <- [x, digit], w], remainingInsns) 
    				      	    esac
	  | {} -> c
	  esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (str)         -> singleton(LD(str))
  | Const (int)       -> singleton(CONST(int))
  | Binop (op, l, r)  -> compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip -> {}
    | Assn(s, expr) -> compileExpr(expr) +++ singleton(ST(s))
    | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
    | Read (s) -> singleton(READ) +++ singleton(ST(s))
    | Write (expr) -> compileExpr(expr) +++ singleton(WRITE)
  esac
}
